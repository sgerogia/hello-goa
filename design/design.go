package design

import (
	. "goa.design/goa/v3/dsl"
)

var _ = API("math", func() {
	Title("Authenticated Math Service")
	Description("API for numeric operations, protected by OAuth2")
	Server("server", func() {

		Services("token", "math")

		Host("local", func() {
			URI("http://localhost:8080")
		})
	})
})

var JWTAuth = JWTSecurity("jwt", func() {
	Description("JWT-based authentication")
})

var User = Type("User", func() {
	Attribute("username", String, "Username to access the service.", func() {
		Example("user")
	})
	Attribute("password", String, "Password to access the service.", func() {
		Example("password")
	})
})

var _ = Service("token", func() {
	Description("OAuth2 Authorisation service.")

	Error("MalformedPayload")

	Method("auth", func() {
		Description(
			`Accepts username and password in the body and returns JWT OAUTH2/OIDC token with the username as a subject, expiring in 1 hour.
The username and password are not verified, but cannot be empty strings.`)

		Payload(User)
		Result(String)

		HTTP(func() {
			POST("/auth")

			Response(StatusOK, func() {
				ContentType("application/json")
			})
			Response("MalformedPayload", StatusBadRequest)
		})
	})

	Files("/token/openapi.json", "../gen/http/token_openapi.json")
	Files("/token/openapi.yaml", "../gen/http/token_openapi.yaml")
})

var _ = Service("math", func() {
	Description("A JWT-authenticated math operations service.")

	Error("Unauthorized")
	Error("MalformedPayload")

	Method("sum", func() {
		Description(
			`Accepts an arbitrary document as payload and sums the numbers contained within.
The document can contain a variety of things: arrays [1,2,3,4], objects {"a":1, "b":2, "c":3}, numbers, and strings. 
The endpoint should find all of the numbers throughout the document and add them together.

For example:
* [1,2,3,4] and {"a":6,"b":4} both have a auth_sum of 10.
* [[[2]]] and {"a":{"b":4},"c":-2} both have a auth_sum of 2.
* {"a":[-1,1,"dark"]} and [-1,{"a":1, "b":"light"}] both have a auth_sum of 0.
* [] and {} both have a auth_sum of 0.

Protected with a valid JWT token, generated by the /auth endpoint, provided as a Bearer Authorization header.
The response is the sum of all numbers in the document.`)

		Security(JWTAuth)

		Payload(func() {
			Attribute("doc", String, "The JSON document to sum the numbers contained within", func() {
				Example(`{"a":{"b":4},"c":-2}`)
			})
			Token("token", String, func() {
				Description("The JWT containing user information")
				Example("eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0.NHVaYe26MbtOYhSKkoKYdFVomg4i8ZJd8_-RU8VNbftc4TSMb4bXP3l3YlNWACwyXPGffz5aXHc6lty1Y2t4SWRqGteragsVdZufDn5BlnJl9pdR_kdVFUsra2rWKEofkZeIC4yWytE58sMIihvo9H1ScmmVwBcQP6XETqYd0aSHp1gOa9RdUPDvoXQ5oqygTqVtxaDr6wUFKrKItgBMzWIdNZ6y7O9E0DhEPTbE9rfBo6KTFsHAZnMg4k68CDp2woYIaXbmYTWcvbzIuHO7_37GT79XdIwkm95QJ7hYC9RiwrV7mesbY4PAahERJawntho0my942XheVLmGwLMBkQ")
			})
			Required("doc", "token")
		})

		Result(String)

		HTTP(func() {
			POST("/sum")
			// maps the Authorization header to the Payload.token attribute
			Header("token:Authorization", String, "Auth token", func() {
				Pattern("^Bearer [^ ]+$")
			})
			Body("doc") // maps the entire HTTP body to the Payload.doc attribute
			Response(StatusOK, func() {
				ContentType("text/plain")
			})
			Response("Unauthorized", StatusUnauthorized)
			Response("MalformedPayload", StatusBadRequest)
		})
	})


	Method("mul", func() {
		Description(
			`Accepts a sequence of numbers and multiplies them.
If any of the arguments is not a valid number, it returns an error. 

Protected with a valid JWT token, generated by the /auth endpoint, provided as a Bearer Authorization header.
The response is the multiplication of all numbers.`)

		Security(JWTAuth)

		Payload(func() {
			Attribute("numbers", ArrayOf(String), "The array of numbers to multiply", func() {
				Example([]string{"4","3.543","-2"})
			})
			Token("token", String, func() {
				Description("The JWT containing user information")
				Example("eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0.NHVaYe26MbtOYhSKkoKYdFVomg4i8ZJd8_-RU8VNbftc4TSMb4bXP3l3YlNWACwyXPGffz5aXHc6lty1Y2t4SWRqGteragsVdZufDn5BlnJl9pdR_kdVFUsra2rWKEofkZeIC4yWytE58sMIihvo9H1ScmmVwBcQP6XETqYd0aSHp1gOa9RdUPDvoXQ5oqygTqVtxaDr6wUFKrKItgBMzWIdNZ6y7O9E0DhEPTbE9rfBo6KTFsHAZnMg4k68CDp2woYIaXbmYTWcvbzIuHO7_37GT79XdIwkm95QJ7hYC9RiwrV7mesbY4PAahERJawntho0my942XheVLmGwLMBkQ")
			})
			Required("numbers", "token")
		})

		Result(String)

		HTTP(func() {
			GET("/mul/{numbers}") // maps the HTTP request to the Payload.numbers attribute
			// maps the Authorization header to the Payload.token attribute
			Header("token:Authorization", String, "Auth token", func() {
				Pattern("^Bearer [^ ]+$")
			})
			Response(StatusOK, func() {
				ContentType("text/plain")
			})
			Response("Unauthorized", StatusUnauthorized)
			Response("MalformedPayload", StatusBadRequest)
		})
	})


	Files("/math/openapi.json", "../gen/http/math_openapi.json")
	Files("/math/openapi.yaml", "../gen/http/math_openapi.yaml")
})
