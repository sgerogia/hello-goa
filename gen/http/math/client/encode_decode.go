// Code generated by goa v3.8.5, DO NOT EDIT.
//
// math HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/sgerogia/hello-goa/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	math "github.com/sgerogia/hello-goa/gen/math"
	goahttp "goa.design/goa/v3/http"
)

// BuildSumRequest instantiates a HTTP request object with method and path set
// to call the "math" service "sum" endpoint
func (c *Client) BuildSumRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: SumMathPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("math", "sum", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeSumRequest returns an encoder for requests sent to the math sum server.
func EncodeSumRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*math.SumPayload)
		if !ok {
			return goahttp.ErrInvalidType("math", "sum", "*math.SumPayload", v)
		}
		{
			head := p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := p.Doc
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("math", "sum", err)
		}
		return nil
	}
}

// DecodeSumResponse returns a decoder for responses returned by the math sum
// endpoint. restoreBody controls whether the response body should be restored
// after having been read.
// DecodeSumResponse may return the following errors:
//   - "Unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "MalformedPayload" (type *goa.ServiceError): http.StatusBadRequest
//   - error: internal error
func DecodeSumResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("math", "sum", err)
			}
			return body, nil
		case http.StatusUnauthorized:
			var (
				body SumUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("math", "sum", err)
			}
			err = ValidateSumUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("math", "sum", err)
			}
			return nil, NewSumUnauthorized(&body)
		case http.StatusBadRequest:
			var (
				body SumMalformedPayloadResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("math", "sum", err)
			}
			err = ValidateSumMalformedPayloadResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("math", "sum", err)
			}
			return nil, NewSumMalformedPayload(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("math", "sum", resp.StatusCode, string(body))
		}
	}
}

// BuildMulRequest instantiates a HTTP request object with method and path set
// to call the "math" service "mul" endpoint
func (c *Client) BuildMulRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		numbers []string
	)
	{
		p, ok := v.(*math.MulPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("math", "mul", "*math.MulPayload", v)
		}
		numbers = p.Numbers
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: MulMathPath(numbers)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("math", "mul", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeMulRequest returns an encoder for requests sent to the math mul server.
func EncodeMulRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*math.MulPayload)
		if !ok {
			return goahttp.ErrInvalidType("math", "mul", "*math.MulPayload", v)
		}
		{
			head := p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeMulResponse returns a decoder for responses returned by the math mul
// endpoint. restoreBody controls whether the response body should be restored
// after having been read.
// DecodeMulResponse may return the following errors:
//   - "Unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "MalformedPayload" (type *goa.ServiceError): http.StatusBadRequest
//   - error: internal error
func DecodeMulResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("math", "mul", err)
			}
			return body, nil
		case http.StatusUnauthorized:
			var (
				body MulUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("math", "mul", err)
			}
			err = ValidateMulUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("math", "mul", err)
			}
			return nil, NewMulUnauthorized(&body)
		case http.StatusBadRequest:
			var (
				body MulMalformedPayloadResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("math", "mul", err)
			}
			err = ValidateMulMalformedPayloadResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("math", "mul", err)
			}
			return nil, NewMulMalformedPayload(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("math", "mul", resp.StatusCode, string(body))
		}
	}
}
