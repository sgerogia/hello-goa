// Code generated by goa v3.8.5, DO NOT EDIT.
//
// math HTTP server
//
// Command:
// $ goa gen github.com/sgerogia/hello-goa/design

package server

import (
	"context"
	"net/http"

	math "github.com/sgerogia/hello-goa/gen/math"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the math service endpoint HTTP handlers.
type Server struct {
	Mounts                 []*MountPoint
	Sum                    http.Handler
	Mul                    http.Handler
	GenHTTPMathOpenapiJSON http.Handler
	GenHTTPMathOpenapiYaml http.Handler
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the design.
type ErrorNamer interface {
	ErrorName() string
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the math service endpoints using the
// provided encoder and decoder. The handlers are mounted on the given mux
// using the HTTP verb and path defined in the design. errhandler is called
// whenever a response fails to be encoded. formatter is used to format errors
// returned by the service methods prior to encoding. Both errhandler and
// formatter are optional and can be nil.
func New(
	e *math.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
	fileSystemGenHTTPMathOpenapiJSON http.FileSystem,
	fileSystemGenHTTPMathOpenapiYaml http.FileSystem,
) *Server {
	if fileSystemGenHTTPMathOpenapiJSON == nil {
		fileSystemGenHTTPMathOpenapiJSON = http.Dir(".")
	}
	if fileSystemGenHTTPMathOpenapiYaml == nil {
		fileSystemGenHTTPMathOpenapiYaml = http.Dir(".")
	}
	return &Server{
		Mounts: []*MountPoint{
			{"Sum", "POST", "/sum"},
			{"Mul", "GET", "/mul/{numbers}"},
			{"../gen/http/math_openapi.json", "GET", "/math/openapi.json"},
			{"../gen/http/math_openapi.yaml", "GET", "/math/openapi.yaml"},
		},
		Sum:                    NewSumHandler(e.Sum, mux, decoder, encoder, errhandler, formatter),
		Mul:                    NewMulHandler(e.Mul, mux, decoder, encoder, errhandler, formatter),
		GenHTTPMathOpenapiJSON: http.FileServer(fileSystemGenHTTPMathOpenapiJSON),
		GenHTTPMathOpenapiYaml: http.FileServer(fileSystemGenHTTPMathOpenapiYaml),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "math" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.Sum = m(s.Sum)
	s.Mul = m(s.Mul)
}

// Mount configures the mux to serve the math endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountSumHandler(mux, h.Sum)
	MountMulHandler(mux, h.Mul)
	MountGenHTTPMathOpenapiJSON(mux, goahttp.Replace("", "/../gen/http/math_openapi.json", h.GenHTTPMathOpenapiJSON))
	MountGenHTTPMathOpenapiYaml(mux, goahttp.Replace("", "/../gen/http/math_openapi.yaml", h.GenHTTPMathOpenapiYaml))
}

// Mount configures the mux to serve the math endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountSumHandler configures the mux to serve the "math" service "sum"
// endpoint.
func MountSumHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/sum", f)
}

// NewSumHandler creates a HTTP handler which loads the HTTP request and calls
// the "math" service "sum" endpoint.
func NewSumHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeSumRequest(mux, decoder)
		encodeResponse = EncodeSumResponse(encoder)
		encodeError    = EncodeSumError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "sum")
		ctx = context.WithValue(ctx, goa.ServiceKey, "math")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountMulHandler configures the mux to serve the "math" service "mul"
// endpoint.
func MountMulHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/mul/{numbers}", f)
}

// NewMulHandler creates a HTTP handler which loads the HTTP request and calls
// the "math" service "mul" endpoint.
func NewMulHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeMulRequest(mux, decoder)
		encodeResponse = EncodeMulResponse(encoder)
		encodeError    = EncodeMulError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "mul")
		ctx = context.WithValue(ctx, goa.ServiceKey, "math")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGenHTTPMathOpenapiJSON configures the mux to serve GET request made to
// "/math/openapi.json".
func MountGenHTTPMathOpenapiJSON(mux goahttp.Muxer, h http.Handler) {
	mux.Handle("GET", "/math/openapi.json", h.ServeHTTP)
}

// MountGenHTTPMathOpenapiYaml configures the mux to serve GET request made to
// "/math/openapi.yaml".
func MountGenHTTPMathOpenapiYaml(mux goahttp.Muxer, h http.Handler) {
	mux.Handle("GET", "/math/openapi.yaml", h.ServeHTTP)
}
