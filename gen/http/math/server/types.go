// Code generated by goa v3.8.5, DO NOT EDIT.
//
// math HTTP server types
//
// Command:
// $ goa gen github.com/sgerogia/hello-goa/design

package server

import (
	math "github.com/sgerogia/hello-goa/gen/math"
	goa "goa.design/goa/v3/pkg"
)

// SumUnauthorizedResponseBody is the type of the "math" service "sum" endpoint
// HTTP response body for the "Unauthorized" error.
type SumUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SumMalformedPayloadResponseBody is the type of the "math" service "sum"
// endpoint HTTP response body for the "MalformedPayload" error.
type SumMalformedPayloadResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// MulUnauthorizedResponseBody is the type of the "math" service "mul" endpoint
// HTTP response body for the "Unauthorized" error.
type MulUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// MulMalformedPayloadResponseBody is the type of the "math" service "mul"
// endpoint HTTP response body for the "MalformedPayload" error.
type MulMalformedPayloadResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// NewSumUnauthorizedResponseBody builds the HTTP response body from the result
// of the "sum" endpoint of the "math" service.
func NewSumUnauthorizedResponseBody(res *goa.ServiceError) *SumUnauthorizedResponseBody {
	body := &SumUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewSumMalformedPayloadResponseBody builds the HTTP response body from the
// result of the "sum" endpoint of the "math" service.
func NewSumMalformedPayloadResponseBody(res *goa.ServiceError) *SumMalformedPayloadResponseBody {
	body := &SumMalformedPayloadResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewMulUnauthorizedResponseBody builds the HTTP response body from the result
// of the "mul" endpoint of the "math" service.
func NewMulUnauthorizedResponseBody(res *goa.ServiceError) *MulUnauthorizedResponseBody {
	body := &MulUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewMulMalformedPayloadResponseBody builds the HTTP response body from the
// result of the "mul" endpoint of the "math" service.
func NewMulMalformedPayloadResponseBody(res *goa.ServiceError) *MulMalformedPayloadResponseBody {
	body := &MulMalformedPayloadResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewSumPayload builds a math service sum endpoint payload.
func NewSumPayload(body string, token string) *math.SumPayload {
	v := body
	res := &math.SumPayload{
		Doc: v,
	}
	res.Token = token

	return res
}

// NewMulPayload builds a math service mul endpoint payload.
func NewMulPayload(numbers []string, token string) *math.MulPayload {
	v := &math.MulPayload{}
	v.Numbers = numbers
	v.Token = token

	return v
}
