// Code generated by goa v3.8.5, DO NOT EDIT.
//
// server HTTP client CLI support package
//
// Command:
// $ goa gen github.com/sgerogia/hello-goa/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	mathc "github.com/sgerogia/hello-goa/gen/http/math/client"
	tokenc "github.com/sgerogia/hello-goa/gen/http/token/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `token auth
math (sum|mul)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` token auth --body '{
      "password": "password",
      "username": "user"
   }'` + "\n" +
		os.Args[0] + ` math sum --body "{\"a\":{\"b\":4},\"c\":-2}" --token "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0.NHVaYe26MbtOYhSKkoKYdFVomg4i8ZJd8_-RU8VNbftc4TSMb4bXP3l3YlNWACwyXPGffz5aXHc6lty1Y2t4SWRqGteragsVdZufDn5BlnJl9pdR_kdVFUsra2rWKEofkZeIC4yWytE58sMIihvo9H1ScmmVwBcQP6XETqYd0aSHp1gOa9RdUPDvoXQ5oqygTqVtxaDr6wUFKrKItgBMzWIdNZ6y7O9E0DhEPTbE9rfBo6KTFsHAZnMg4k68CDp2woYIaXbmYTWcvbzIuHO7_37GT79XdIwkm95QJ7hYC9RiwrV7mesbY4PAahERJawntho0my942XheVLmGwLMBkQ"` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		tokenFlags = flag.NewFlagSet("token", flag.ContinueOnError)

		tokenAuthFlags    = flag.NewFlagSet("auth", flag.ExitOnError)
		tokenAuthBodyFlag = tokenAuthFlags.String("body", "REQUIRED", "")

		mathFlags = flag.NewFlagSet("math", flag.ContinueOnError)

		mathSumFlags     = flag.NewFlagSet("sum", flag.ExitOnError)
		mathSumBodyFlag  = mathSumFlags.String("body", "REQUIRED", "")
		mathSumTokenFlag = mathSumFlags.String("token", "REQUIRED", "")

		mathMulFlags       = flag.NewFlagSet("mul", flag.ExitOnError)
		mathMulNumbersFlag = mathMulFlags.String("numbers", "REQUIRED", "The array of numbers to multiply")
		mathMulTokenFlag   = mathMulFlags.String("token", "REQUIRED", "")
	)
	tokenFlags.Usage = tokenUsage
	tokenAuthFlags.Usage = tokenAuthUsage

	mathFlags.Usage = mathUsage
	mathSumFlags.Usage = mathSumUsage
	mathMulFlags.Usage = mathMulUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "token":
			svcf = tokenFlags
		case "math":
			svcf = mathFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "token":
			switch epn {
			case "auth":
				epf = tokenAuthFlags

			}

		case "math":
			switch epn {
			case "sum":
				epf = mathSumFlags

			case "mul":
				epf = mathMulFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "token":
			c := tokenc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "auth":
				endpoint = c.Auth()
				data, err = tokenc.BuildAuthPayload(*tokenAuthBodyFlag)
			}
		case "math":
			c := mathc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "sum":
				endpoint = c.Sum()
				data, err = mathc.BuildSumPayload(*mathSumBodyFlag, *mathSumTokenFlag)
			case "mul":
				endpoint = c.Mul()
				data, err = mathc.BuildMulPayload(*mathMulNumbersFlag, *mathMulTokenFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// tokenUsage displays the usage of the token command and its subcommands.
func tokenUsage() {
	fmt.Fprintf(os.Stderr, `OAuth2 Authorisation service.
Usage:
    %[1]s [globalflags] token COMMAND [flags]

COMMAND:
    auth: Accepts username and password in the body and returns JWT OAUTH2/OIDC token with the username as a subject, expiring in 1 hour.
	The username and password are not verified, but cannot be empty strings.

Additional help:
    %[1]s token COMMAND --help
`, os.Args[0])
}
func tokenAuthUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] token auth -body JSON

Accepts username and password in the body and returns JWT OAUTH2/OIDC token with the username as a subject, expiring in 1 hour.
	The username and password are not verified, but cannot be empty strings.
    -body JSON: 

Example:
    %[1]s token auth --body '{
      "password": "password",
      "username": "user"
   }'
`, os.Args[0])
}

// mathUsage displays the usage of the math command and its subcommands.
func mathUsage() {
	fmt.Fprintf(os.Stderr, `A JWT-authenticated math operations service.
Usage:
    %[1]s [globalflags] math COMMAND [flags]

COMMAND:
    sum: Accepts an arbitrary document as payload and sums the numbers contained within.
	The document can contain a variety of things: arrays [1,2,3,4], objects {"a":1, "b":2, "c":3}, numbers, and strings. 
	The endpoint should find all of the numbers throughout the document and add them together.
	
	For example:
	* [1,2,3,4] and {"a":6,"b":4} both have a auth_sum of 10.
	* [[[2]]] and {"a":{"b":4},"c":-2} both have a auth_sum of 2.
	* {"a":[-1,1,"dark"]} and [-1,{"a":1, "b":"light"}] both have a auth_sum of 0.
	* [] and {} both have a auth_sum of 0.
	
	Protected with a valid JWT token, generated by the /auth endpoint, provided as a Bearer Authorization header.
	The response is the sum of all numbers in the document.
    mul: Accepts a sequence of numbers and multiplies them.
	If any of the arguments is not a valid number, it returns an error. 
	
	Protected with a valid JWT token, generated by the /auth endpoint, provided as a Bearer Authorization header.
	The response is the multiplication of all numbers.

Additional help:
    %[1]s math COMMAND --help
`, os.Args[0])
}
func mathSumUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] math sum -body STRING -token STRING

Accepts an arbitrary document as payload and sums the numbers contained within.
	The document can contain a variety of things: arrays [1,2,3,4], objects {"a":1, "b":2, "c":3}, numbers, and strings. 
	The endpoint should find all of the numbers throughout the document and add them together.
	
	For example:
	* [1,2,3,4] and {"a":6,"b":4} both have a auth_sum of 10.
	* [[[2]]] and {"a":{"b":4},"c":-2} both have a auth_sum of 2.
	* {"a":[-1,1,"dark"]} and [-1,{"a":1, "b":"light"}] both have a auth_sum of 0.
	* [] and {} both have a auth_sum of 0.
	
	Protected with a valid JWT token, generated by the /auth endpoint, provided as a Bearer Authorization header.
	The response is the sum of all numbers in the document.
    -body STRING: 
    -token STRING: 

Example:
    %[1]s math sum --body "{\"a\":{\"b\":4},\"c\":-2}" --token "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0.NHVaYe26MbtOYhSKkoKYdFVomg4i8ZJd8_-RU8VNbftc4TSMb4bXP3l3YlNWACwyXPGffz5aXHc6lty1Y2t4SWRqGteragsVdZufDn5BlnJl9pdR_kdVFUsra2rWKEofkZeIC4yWytE58sMIihvo9H1ScmmVwBcQP6XETqYd0aSHp1gOa9RdUPDvoXQ5oqygTqVtxaDr6wUFKrKItgBMzWIdNZ6y7O9E0DhEPTbE9rfBo6KTFsHAZnMg4k68CDp2woYIaXbmYTWcvbzIuHO7_37GT79XdIwkm95QJ7hYC9RiwrV7mesbY4PAahERJawntho0my942XheVLmGwLMBkQ"
`, os.Args[0])
}

func mathMulUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] math mul -numbers JSON -token STRING

Accepts a sequence of numbers and multiplies them.
	If any of the arguments is not a valid number, it returns an error. 
	
	Protected with a valid JWT token, generated by the /auth endpoint, provided as a Bearer Authorization header.
	The response is the multiplication of all numbers.
    -numbers JSON: The array of numbers to multiply
    -token STRING: 

Example:
    %[1]s math mul --numbers '[
      "4",
      "3.543",
      "-2"
   ]' --token "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0.NHVaYe26MbtOYhSKkoKYdFVomg4i8ZJd8_-RU8VNbftc4TSMb4bXP3l3YlNWACwyXPGffz5aXHc6lty1Y2t4SWRqGteragsVdZufDn5BlnJl9pdR_kdVFUsra2rWKEofkZeIC4yWytE58sMIihvo9H1ScmmVwBcQP6XETqYd0aSHp1gOa9RdUPDvoXQ5oqygTqVtxaDr6wUFKrKItgBMzWIdNZ6y7O9E0DhEPTbE9rfBo6KTFsHAZnMg4k68CDp2woYIaXbmYTWcvbzIuHO7_37GT79XdIwkm95QJ7hYC9RiwrV7mesbY4PAahERJawntho0my942XheVLmGwLMBkQ"
`, os.Args[0])
}
