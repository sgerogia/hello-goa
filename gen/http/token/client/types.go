// Code generated by goa v3.8.5, DO NOT EDIT.
//
// token HTTP client types
//
// Command:
// $ goa gen github.com/sgerogia/hello-goa/design

package client

import (
	token "github.com/sgerogia/hello-goa/gen/token"
	goa "goa.design/goa/v3/pkg"
)

// AuthRequestBody is the type of the "token" service "auth" endpoint HTTP
// request body.
type AuthRequestBody struct {
	// Username to access the service.
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// Password to access the service.
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
}

// AuthMalformedPayloadResponseBody is the type of the "token" service "auth"
// endpoint HTTP response body for the "MalformedPayload" error.
type AuthMalformedPayloadResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// NewAuthRequestBody builds the HTTP request body from the payload of the
// "auth" endpoint of the "token" service.
func NewAuthRequestBody(p *token.User) *AuthRequestBody {
	body := &AuthRequestBody{
		Username: p.Username,
		Password: p.Password,
	}
	return body
}

// NewAuthMalformedPayload builds a token service auth endpoint
// MalformedPayload error.
func NewAuthMalformedPayload(body *AuthMalformedPayloadResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateAuthMalformedPayloadResponseBody runs the validations defined on
// auth_MalformedPayload_response_body
func ValidateAuthMalformedPayloadResponseBody(body *AuthMalformedPayloadResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}
