// Code generated by goa v3.8.5, DO NOT EDIT.
//
// token HTTP server types
//
// Command:
// $ goa gen github.com/sgerogia/hello-goa/design

package server

import (
	token "github.com/sgerogia/hello-goa/gen/token"
	goa "goa.design/goa/v3/pkg"
)

// AuthRequestBody is the type of the "token" service "auth" endpoint HTTP
// request body.
type AuthRequestBody struct {
	// Username to access the service.
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// Password to access the service.
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
}

// AuthMalformedPayloadResponseBody is the type of the "token" service "auth"
// endpoint HTTP response body for the "MalformedPayload" error.
type AuthMalformedPayloadResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// NewAuthMalformedPayloadResponseBody builds the HTTP response body from the
// result of the "auth" endpoint of the "token" service.
func NewAuthMalformedPayloadResponseBody(res *goa.ServiceError) *AuthMalformedPayloadResponseBody {
	body := &AuthMalformedPayloadResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAuthUser builds a token service auth endpoint payload.
func NewAuthUser(body *AuthRequestBody) *token.User {
	v := &token.User{
		Username: body.Username,
		Password: body.Password,
	}

	return v
}
