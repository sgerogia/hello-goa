// Code generated by goa v3.8.5, DO NOT EDIT.
//
// math endpoints
//
// Command:
// $ goa gen github.com/sgerogia/hello-goa/design

package math

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "math" service endpoints.
type Endpoints struct {
	Sum goa.Endpoint
	Mul goa.Endpoint
}

// NewEndpoints wraps the methods of the "math" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		Sum: NewSumEndpoint(s, a.JWTAuth),
		Mul: NewMulEndpoint(s, a.JWTAuth),
	}
}

// Use applies the given middleware to all the "math" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Sum = m(e.Sum)
	e.Mul = m(e.Mul)
}

// NewSumEndpoint returns an endpoint function that calls the method "sum" of
// service "math".
func NewSumEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*SumPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		ctx, err = authJWTFn(ctx, p.Token, &sc)
		if err != nil {
			return nil, err
		}
		return s.Sum(ctx, p)
	}
}

// NewMulEndpoint returns an endpoint function that calls the method "mul" of
// service "math".
func NewMulEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*MulPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		ctx, err = authJWTFn(ctx, p.Token, &sc)
		if err != nil {
			return nil, err
		}
		return s.Mul(ctx, p)
	}
}
