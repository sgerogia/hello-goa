package mathapi

import (
	"context"
	"fmt"
	"log"

	math "github.com/sgerogia/hello-goa/gen/math"
	"goa.design/goa/v3/security"
)

// math service example implementation.
// The example methods log the requests and return zero values.
type mathsrvc struct {
	logger *log.Logger
}

// NewMath returns the math service implementation.
func NewMath(logger *log.Logger) math.Service {
	return &mathsrvc{logger}
}

// JWTAuth implements the authorization logic for service "math" for the "jwt"
// security scheme.
func (s *mathsrvc) JWTAuth(ctx context.Context, token string, scheme *security.JWTScheme) (context.Context, error) {
	//
	// TBD: add authorization logic.
	//
	// In case of authorization failure this function should return
	// one of the generated error structs, e.g.:
	//
	//    return ctx, myservice.MakeUnauthorizedError("invalid token")
	//
	// Alternatively this function may return an instance of
	// goa.ServiceError with a Name field value that matches one of
	// the design error names, e.g:
	//
	//    return ctx, goa.PermanentError("unauthorized", "invalid token")
	//
	return ctx, fmt.Errorf("not implemented")
}

// Accepts an arbitrary document as payload and sums the numbers contained
// within.
// The document can contain a variety of things: arrays [1,2,3,4], objects
// {"a":1, "b":2, "c":3}, numbers, and strings.
// The endpoint should find all of the numbers throughout the document and add
// them together.

// For example:
// * [1,2,3,4] and {"a":6,"b":4} both have a auth_sum of 10.
// * [[[2]]] and {"a":{"b":4},"c":-2} both have a auth_sum of 2.
// * {"a":[-1,1,"dark"]} and [-1,{"a":1, "b":"light"}] both have a auth_sum of
// 0.
// * [] and {} both have a auth_sum of 0.

// Protected with a valid JWT token, generated by the /auth endpoint, provided
// as a Bearer Authorization header.
// The response is the sum of all numbers in the document.
func (s *mathsrvc) Sum(ctx context.Context, p *math.SumPayload) (res string, err error) {
	s.logger.Print("math.sum")
	return
}

// Accepts a sequence of numbers and multiplies them.
// If any of the arguments is not a valid number, it returns an error.

// Protected with a valid JWT token, generated by the /auth endpoint, provided
// as a Bearer Authorization header.
// The response is the multiplication of all numbers.
func (s *mathsrvc) Mul(ctx context.Context, p *math.MulPayload) (res string, err error) {
	s.logger.Print("math.mul")
	return
}
